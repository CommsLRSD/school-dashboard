// Simple i18next-like implementation
(function(global) {
    const i18next = {
        language: 'en',
        resources: {},
        fallbackLng: 'en',
        
        init: function(options) {
            if (options.lng) this.language = options.lng;
            if (options.fallbackLng) this.fallbackLng = options.fallbackLng;
            if (options.resources) this.resources = options.resources;
            return Promise.resolve();
        },
        
        addResourceBundle: function(lng, ns, resources) {
            if (!this.resources[lng]) this.resources[lng] = {};
            this.resources[lng][ns] = resources;
        },
        
        changeLanguage: function(lng) {
            this.language = lng;
            return Promise.resolve();
        },
        
        t: function(key) {
            const keys = key.split('.');
            let result = this.resources[this.language]?.['translation'];
            
            if (!result) {
                result = this.resources[this.fallbackLng]?.['translation'];
            }
            
            for (const k of keys) {
                if (result && typeof result === 'object') {
                    result = result[k];
                } else {
                    return key;
                }
            }
            
            return result || key;
        }
    };
    
    global.i18next = i18next;
})(typeof window !== 'undefined' ? window : this);
